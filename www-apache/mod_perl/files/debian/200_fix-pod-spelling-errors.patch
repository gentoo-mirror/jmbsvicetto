Description: Fix spelling errors in documentation
 This includes both POD and comments.
 The 'overriden -> overridden' fix may also be applied to variable names,
 but is not done with this patch.
Forwarded: http://mail-archives.apache.org/mod_mbox/perl-modperl/201004.mbox/thread
Author: Damyan Ivanov <dmn@debian.org>
Last-Update: 2011-04-10
Reviewed-by: Nicholas Bamber <nicholas@periapt.co.uk>

--- a/docs/api/Apache2/Util.pod
+++ b/docs/api/Apache2/Util.pod
@@ -36,7 +36,7 @@ C<Apache2::Util> provides the following
 
 =head2 C<escape_path>
 
-convert an OS path to a URL in an OS dependant way.
+convert an OS path to a URL in an OS dependent way.
 
   $escaped_path = Apache2::Util::escape_path($path, $p);
   $escaped_path = Apache2::Util::escape_path($path, $p, $partial);
--- a/docs/api/ModPerl/MM.pod
+++ b/docs/api/ModPerl/MM.pod
@@ -55,7 +55,7 @@ hasn't already specified a method I<MY::
 C<ModPerl::MM> will DWIM and do nothing.
 
 In case the functionality of C<ModPerl::MM> methods needs to be
-extended, rather than completely overriden, the C<ModPerl::MM> methods
+extended, rather than completely overridden, the C<ModPerl::MM> methods
 can be called internally. For example if you need to modify constants
 in addition to the modifications applied by
 C<ModPerl::MM::MY::constants>, call the C<ModPerl::MM::MY::constants>
@@ -72,7 +72,7 @@ not C<ModPerl::MM>), then do your extra
 In certain cases a developers may want to prevent from C<ModPerl::MM>
 to override certain methods. In that case an explicit override in
 I<Makefile.PL> will do the job. For example if you don't want the
-C<constants()> method to be overriden by C<ModPerl::MM>, add to your
+C<constants()> method to be overridden by C<ModPerl::MM>, add to your
 I<Makefile.PL>:
 
   sub MY::constants { shift->MM::constants(@_); }";
@@ -89,7 +89,7 @@ C<ModPerl::MM::WriteMakefile> supplies d
 C<INC> and C<TYPEMAPS> unless they weren't passed to
 C<ModPerl::MM::WriteMakefile> from I<Makefile.PL>.
 
-If the default values aren't satisfying these should be overriden in
+If the default values aren't satisfying these should be overridden in
 I<Makefile.PL>. For example to supply an empty INC, explicitly set the
 argument in I<Makefile.PL>.
 
--- a/docs/api/ModPerl/RegistryCooker.pod
+++ b/docs/api/ModPerl/RegistryCooker.pod
@@ -25,7 +25,7 @@ Provide ingredients that can be used by
 
 =item *
 
-Provide a default behavior, which can be overriden in sub-classed
+Provide a default behavior, which can be overridden in sub-classed
 
 META: in the future this functionality may move into a separate class.
 
--- a/lib/Apache2/compat.pm
+++ b/lib/Apache2/compat.pm
@@ -254,7 +254,7 @@ sub override_mp2_api {
 }
 
 # restore_mp2_api does the opposite of override_mp2_api(), it removes
-# the overriden API and restores the original mod_perl 2.0 API
+# the overridden API and restores the original mod_perl 2.0 API
 sub restore_mp2_api {
     my (@subs) = @_;
 
--- a/lib/Apache2/porting.pm
+++ b/lib/Apache2/porting.pm
@@ -84,9 +84,9 @@ BEGIN {
         $package =~ s|/|::|g;
         $package =~ s|.pm$||;
 
-        # this picks the original require (which could be overriden
+        # this picks the original require (which could be overridden
         # elsewhere, so we don't lose that) because we haven't
-        # overriden it yet
+        # overridden it yet
         return require $_[0] unless $packages{$package};
 
         my $msg = "mod_perl 2.0 API doesn't include package '$package'.";
--- a/xs/APR/Pool/APR__Pool.h
+++ b/xs/APR/Pool/APR__Pool.h
@@ -49,7 +49,7 @@ APR_OPTIONAL_FN_TYPE(modperl_thx_interp_
 #define MP_APR_POOL_SV_HAS_OWNERSHIP(sv) mpxs_pool_is_custom(sv)
 
 /* before the magic is freed, one needs to carefully detach the
- * dependant pool magic added by mpxs_add_pool_magic (most of the time
+ * dependent pool magic added by mpxs_add_pool_magic (most of the time
  * it'd be a parent pool), and postpone its destruction, until after
  * the child pool is destroyed. Since if we don't do that the
  * destruction of the parent pool will destroy the child pool C guts
--- a/todo/bugs_build
+++ b/todo/bugs_build
@@ -71,7 +71,7 @@ HPUX11i     DSO
 
 * we have a dependency check problem when xs/*/*.h use code from
   xs/modperl_xs*.h, when the latter change 'make' won't rebuild the
-  dependant files
+  dependent files
 
 * Testing:
   Need to put Philippe's smoking test into the core
--- a/docs/api/Apache2/RequestUtil.pod
+++ b/docs/api/Apache2/RequestUtil.pod
@@ -815,7 +815,7 @@ Nothing, except it doesn't work as expec
 same code is called in a sub-request then the pnote of $r-E<gt>prev is magically 
 updated at a distance to the same value!
 
-Try explain why that is to anyone not deeply familar with perl internals!
+Try to explain why that is to anyone not deeply familiar with perl internals!
 
 The fix is to avoid pnotes taking a ref to the invisible op_targ embededed in 
 the code by passing a simple lexical variable as the actual argument. That can be done in-line like this:
--- a/docs/user/intro/overview.pod
+++ b/docs/user/intro/overview.pod
@@ -279,7 +279,7 @@ mod_perl 2.0's I<method handlers>. See t
 
 =item *
 
-The I<warnings> pragma, which allows to force the code to be super
+The I<warnings> pragma, which allows one to force the code to be super
 clean, via the setting:
 
   use warnings FATAL => 'all';
--- a/docs/user/handlers/http.pod
+++ b/docs/user/handlers/http.pod
@@ -1580,7 +1580,7 @@ There are several usages for this use ph
 a cleanup code, for example removing temporarily created files. The
 less obvious is to use this phase instead of
 C<L<PerlLogHandler|/PerlLogHandler>> if the logging operation is time
-consuming. This approach allows to free the client as soon as the
+consuming. This approach allows one to free the client as soon as the
 response is sent.
 
 This phase is of type
--- a/docs/user/coding/coding.pod
+++ b/docs/user/coding/coding.pod
@@ -300,7 +300,7 @@ downgrade them to be non-fatal. The foll
   no warnings 'redefine';
   use warnings 'redefine';
 
-Perl 5.8.0 allows to do all this in one line:
+Perl 5.8.0 allows one to do all this in one line:
 
   use warnings FATAL => 'all', NONFATAL => 'redefine';
 
--- a/docs/api/Apache2/SizeLimit.pod
+++ b/docs/api/Apache2/SizeLimit.pod
@@ -147,7 +147,7 @@ the patch is included in the mm-tree (li
 to make it into the vanilla kernel in the near future.
 
 F</proc/self/smaps> reports various sizes for each memory segment of a
-process and allows to count the amount of shared memory correctly.
+process and allows one to count the amount of shared memory correctly.
 
 If C<Apache2::SizeLimit> detects a kernel that supports F</proc/self/smaps>
 and if the C<Linux::Smaps> module is installed it will use them instead of
--- a/docs/api/Apache2/RequestRec.pod
+++ b/docs/api/Apache2/RequestRec.pod
@@ -804,7 +804,7 @@ Get/set MIME response headers, printed o
 
 =back
 
-See also C<L<err_headers_out|/C_err_headers_out_>>, which allows to
+See also C<L<err_headers_out|/C_err_headers_out_>>, which allows one to
 set headers for non-2xx responses and persist across internal
 redirects.
 
--- a/docs/api/ModPerl/RegistryLoader.pod
+++ b/docs/api/ModPerl/RegistryLoader.pod
@@ -175,7 +175,7 @@ otherwise the C<$virtual_hostname> argum
 C<ModPerl::RegistryLoader> performs a very simple job, at run time it
 loads and sub-classes the module passed via the I<package> attribute
 and overrides some of its functions, to emulate the run-time
-environment. This allows to preload the same script into different
+environment. This allows one to preload the same script into different
 registry environments.
 
 =head1 Authors
--- a/docs/devel/core/mod_perl_specific.pod
+++ b/docs/devel/core/mod_perl_specific.pod
@@ -131,7 +131,7 @@ a normal Perl handler by modperl_run_fil
                        retrieve ctx->handler
   modperl_output_filter_handler -> modperl_run_filter -> modperl_callback
 
-This trick allows to have more than one filter handler in the filters
+This trick allows one to have more than one filter handler in the filters
 chain using the same Apache filter name (the real filter's name is
 stored in ctx-E<gt>handler-E<gt>name.
 
